datasource db {
  provider = "mongodb" //postgresql
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                 String                  @id @default(cuid()) @map("_id")
  email              String                  @unique
  emailVerified      Boolean                 @default(false)
  role               UserRole                @default(USER)
  name               String?
  // firstName          String?
  // lastName           String?
  avatarUrl          String?
  createdAt          DateTime                @default(now())
  hashedPassword     String?
  oauthAccounts      UserOauthAccount[]
  sessions           UserSession[]
  memberships        TeamMembership[]
  verificationtokens UserVerificationToken[]
  oneTimePasswords   UserOneTimePassword[]
}


model Blog {
  id              String    @id @default(uuid()) @map("_id")
  title           String
  author          String
  slug            String    @unique
  description     String
  keywords        String
  category        String?
  content         String?   
  thumbnail       String?
  language        String?
  status          String?    
  views           Int?       @default(0)
  createdAt       DateTime                @default(now())
  published       Boolean    @default(true)
}

model Category {
  id            String    @id @default(uuid()) @map("_id")
  name          String    
  language      String
}


model UserSession {
  id             String   @id @map("_id")
  userId         String
  expiresAt      DateTime
  impersonatorId String?
  user           User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UserOauthAccount {
  id             String @id @default(cuid()) @map("_id")
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([providerId, providerUserId])
}

model UserVerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  userId  String
  user    User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  token   String
  expires DateTime

  @@index([userId])
}

enum UserOneTimePasswordType {
  SIGNUP
  LOGIN
  PASSWORD_RESET
}

model UserOneTimePassword {
  id         String                  @id @default(cuid()) @map("_id")
  userId     String
  user       User                    @relation(references: [id], fields: [userId], onDelete: Cascade)
  code       String
  type       UserOneTimePasswordType
  identifier String
  expires    DateTime

  @@index([userId])
}

model Team {
  id           String           @id @default(cuid()) @map("_id")
  name         String
  avatarUrl    String?
  memberships  TeamMembership[]
  subscription Subscription?
  invitations  TeamInvitation[]
}

enum TeamMemberRole {
  MEMBER
  OWNER
}

model TeamMembership {
  id        String         @id @default(cuid()) @map("_id")
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      TeamMemberRole @default(MEMBER)
  isCreator Boolean        @default(false)

  @@unique([teamId, userId])
}

model TeamInvitation {
  id        String         @id @default(cuid()) @map("_id")
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  email     String
  role      TeamMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  expiresAt DateTime       @updatedAt

  @@unique([teamId, email])
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAUSED
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  EXPIRED
}

model Subscription {
  id              String             @id @map("_id")
  team            Team               @relation(fields: [teamId], references: [id])
  teamId          String             @unique
  customerId      String
  status          SubscriptionStatus
  planId          String
  variantId       String
  nextPaymentDate DateTime?
}

enum OrderStatus {
  CREATED
  PENDING
  PAID
}

model Order {
  id              String              @id @default(cuid()) @map("_id")
  orderId         String              @unique
  email           String
  status          OrderStatus         @default(CREATED)
  createdAt       DateTime            @default(now())
}

model UserSubscription {
  id                      String             @id @map("_id")
  orderId                 String              @unique
  txnId                   String
  itemAmount              Int?
  receivedAmount          Float?
  receivedConfirms        Int?
  email                   String
  status                  OrderStatus
  firstCurrency           String
  secondCurrency          String
  firstAmount             Int?
  secondAmount            Float?
  paidAt                  DateTime            @default(now())
}